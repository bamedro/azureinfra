name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  env_my_var: ${{ vars.MY_VAR }}

jobs:
  plan:
    name: 'Terraform Plan'
    runs-on: self-hosted

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -out plan.out

    - name: 'Upload Plan Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: plan
        path: plan.out
        retention-days: 5
    - name: Adding markdown
      run: echo '### Hello world! ðŸš€' >> $GITHUB_STEP_SUMMARY

    - uses: actions/attest-build-provenance@v2
      with:
        subject-path: 'plan.out'

  apply:
    name: 'Terraform Apply'
    runs-on: self-hosted
    needs: ["plan"]
    environment: prod

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

    - name: 'Download Plan Artifact'
      uses: actions/download-artifact@v4
      with:
        name: plan

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform show
      run: |
        echo "Variable : $env_my_var"
        terraform show plan.out
